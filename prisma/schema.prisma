// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String    @id @default(cuid())
  userId   String    @unique
  name     String
  email    String    @db.Text
  imageUrl String?   @db.Text
  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String    @id @default(cuid())
  name       String
  imageUrl   String?   @db.Text
  inviteCode String    @unique
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  channels   Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model Member {
  id        String     @id @default(cuid())
  role      MemberRole @default(GUEST)
  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]
  conversationsInitiated Conversation[] @relation("memberOne")
  conversationsReceived Conversation[] @relation("memberTwo")
  directMessages DirectMessage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id        String      @id @default(cuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String  @id @default(cuid())
  content   String @db.Text
  fileUrl   String? @db.Text
  deleted   Boolean @default(false)
  memberId  String
  member    Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id        String   @id @default(cuid())
  memberOneId String
  memberOne   Member @relation("memberOne",fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member @relation("memberTwo",fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages   DirectMessage[]
  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectMessage {
  id        String  @id @default(cuid())
  content   String @db.Text
  fileUrl   String? @db.Text
  deleted   Boolean @default(false)
  
  memberId  String
  member    Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([memberId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum MemberRole {
  MODERATOR
  GUEST
  ADMIN
}
